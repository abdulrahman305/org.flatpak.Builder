From d300f6581467002a9515ce1441619a372a5ccd82 Mon Sep 17 00:00:00 2001
From: bbhtt <bbhtt.zn0i8@slmail.me>
Date: Tue, 8 Jul 2025 19:45:00 +0530
Subject: [PATCH] builder-manifest: Copy the svg icon of the application to
 media_dir

The contents of the media_dir are extracted by flat-manager to make
them available at `https://dl.flathub.org/media/` which is then used
by the Flathub website to show icons and screenshots.

Website wants [1] to use SVG icons but appstream and Flatpak only ships
PNGs in catalogue/appstream ref. We can't modify catalogue to add
or change PNG->SVG as that will mess up native software clients and
changing Flatpak is also a long shot. Appstream on the other hand
hasn't been responsive [2].

So this is a quick hack that just puts the icon (if exists) from
`$FLATPAK_DEST/share/icons/hicolor/scalable/apps/$FLATPAK_ID.svg`
inside the media_dir.

First we check if any directory inside
`${FLATPAK_DEST}/share/app-info/media` has a `icons/128x128/`
subdirectory as the hash in the full path comes from appstream and may
change. Since this is "generated" and at a time only one such full path
can be present this should be safe. This also confirms that the
app "exported" an icon.

Once that is found, we go to the parent directory and calculate the
destination for the scalable icon ie.
`${FLATPAK_DEST}/share/app-info/media/$decomp/$app/$id/$hash/icons/scalable`

Then if the scalable icon is already present there we remove it and if
a scalable icon exists in
`$FLATPAK_DEST/share/icons/hicolor/scalable/apps/$FLATPAK_ID.svg` we
copy it to `${FLATPAK_DEST}/share/app-info/media/$decomp/$app/$id/$hash/icons/scalable`

[1]: https://github.com/flathub-infra/website/issues/3176
[2]: https://github.com/ximion/appstream/issues/656
---
 src/builder-manifest.c | 102 +++++++++++++++++++++++++++++++++++++++++
 1 file changed, 102 insertions(+)

diff --git a/src/builder-manifest.c b/src/builder-manifest.c
index 74d1074f..c1e97e78 100644
--- a/src/builder-manifest.c
+++ b/src/builder-manifest.c
@@ -2430,6 +2430,107 @@ appstreamcli_compose (GError **error,
   return TRUE;
 }
 
+static gboolean
+ship_svg_icon_in_media(const gchar *appid, const gchar *app_root, const gchar *media_dir) {
+  gboolean success = FALSE;
+  gchar *png_fname = g_strconcat(appid, ".png", NULL);
+  gchar *svg_dir = g_build_filename(app_root, "share", "icons", "hicolor", "scalable", "apps", NULL);
+  gchar *svg_filename = g_strconcat(appid, ".svg", NULL);
+  gchar *svg_full_path = g_build_filename(svg_dir, svg_filename, NULL);
+  gchar *icon_path = NULL;
+  gchar *parent_dir = NULL;
+  gchar *icons_dir = NULL;
+  gchar *app_dir = NULL;
+  gchar *scalable_dir = NULL;
+  gchar *dest_svg_path = NULL;
+
+  GQueue *dirs = g_queue_new();
+  g_queue_push_tail(dirs, g_strdup(media_dir));
+
+  while (!g_queue_is_empty(dirs)) {
+    gchar *current_dir = g_queue_pop_head(dirs);
+    GDir *dir = g_dir_open(current_dir, 0, NULL);
+
+    if (dir) {
+      const gchar *filename;
+      while ((filename = g_dir_read_name(dir)) != NULL) {
+        gchar *full_path = g_build_filename(current_dir, filename, NULL);
+        if (g_file_test(full_path, G_FILE_TEST_IS_DIR)) {
+          g_queue_push_tail(dirs, full_path);
+        } else if (g_str_has_suffix(full_path, png_fname)) {
+            if (g_strrstr(full_path, "icons/128x128/")) {
+              icon_path = g_strdup(full_path);
+              g_free(full_path);
+              g_dir_close(dir);
+              g_free(current_dir);
+              goto found;
+            }
+            g_free(full_path);
+          } else {
+            g_free(full_path);
+          }
+        }
+        g_dir_close(dir);
+      }
+      g_free(current_dir);
+  }
+   
+found:
+  g_queue_free_full(dirs, g_free);
+
+  if (!icon_path || !g_file_test(svg_full_path, G_FILE_TEST_EXISTS)) {
+    goto cleanup;
+  }
+
+  parent_dir = g_path_get_dirname(icon_path);
+  icons_dir = g_path_get_dirname(parent_dir);
+  app_dir = g_path_get_dirname(icons_dir);
+  scalable_dir = g_build_filename(app_dir, "icons", "scalable", NULL);
+
+  if (!g_file_test(scalable_dir, G_FILE_TEST_IS_DIR)) {
+    if (g_mkdir_with_parents(scalable_dir, 0755) != 0) {
+      goto cleanup;
+    }
+  }
+
+  dest_svg_path = g_build_filename(scalable_dir, svg_filename, NULL);
+
+  GFile *src = g_file_new_for_path(svg_full_path);
+  GFile *dst = g_file_new_for_path(dest_svg_path);
+  GError *error = NULL;
+
+  if (g_file_test(dest_svg_path, G_FILE_TEST_EXISTS)) {
+    if (!g_file_delete(dst, NULL, &error)) {
+      g_clear_error(&error);
+      g_object_unref(src);
+      g_object_unref(dst);
+      goto cleanup;
+    }
+  }
+
+  if (g_file_copy(src, dst, G_FILE_COPY_NONE, NULL, NULL, NULL, &error)) {
+    success = TRUE;
+  } else {
+    g_clear_error(&error);
+  }
+
+  g_object_unref(src);
+  g_object_unref(dst);
+   
+cleanup:
+  g_free(png_fname);
+  g_free(svg_dir);
+  g_free(svg_filename);
+  g_free(svg_full_path);
+  g_free(icon_path);
+  g_free(parent_dir);
+  g_free(icons_dir);
+  g_free(app_dir);
+  g_free(scalable_dir);
+  g_free(dest_svg_path);
+  return success;
+}
+
 static char **
 strcatv (char **strv1,
          char **strv2)
@@ -3070,6 +3171,7 @@ builder_manifest_cleanup (BuilderManifest *self,
                                          app_root_path,
                                          NULL))
               return FALSE;
+            ship_svg_icon_in_media(builder_manifest_get_id (self), app_root_path, flatpak_file_get_path_cached (media_dir));
             }
           else
             {
-- 
2.49.0

